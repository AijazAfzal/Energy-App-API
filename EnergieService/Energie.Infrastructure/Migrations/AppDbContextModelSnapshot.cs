// <auto-generated />
using System;
using Energie.Infrastructure.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Energie.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Energie.Domain.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Energie.Domain.Domain.CompanyAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("CompanyAdmin");
                });

            modelBuilder.Entity("Energie.Domain.Domain.CompanyDepartmentHelp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Contribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HelpCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("MoreInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requestvia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HelpCategoryId");

                    b.ToTable("CompanyDepartmentHelp");
                });

            modelBuilder.Entity("Energie.Domain.Domain.CompanyHelp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HelpCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnContribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requestvia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("HelpCategoryId");

                    b.ToTable("CompanyHelps");
                });

            modelBuilder.Entity("Energie.Domain.Domain.CompanyHelpCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyHelpCategorys");
                });

            modelBuilder.Entity("Energie.Domain.Domain.CompanyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Is_Notification")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageID")
                        .HasColumnType("int");

                    b.Property<bool>("ShowOnboarding")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LanguageID");

                    b.ToTable("CompanyUser");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Energie.Domain.Domain.DepartmentEnergyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FavouriteTipId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReminder")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PlanEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.Property<int>("TipTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("PlanStatusId");

                    b.HasIndex("ResponsiblePersonId");

                    b.HasIndex("TipTypeId");

                    b.ToTable("DepartmentEnergyPlans");
                });

            modelBuilder.Entity("Energie.Domain.Domain.DepartmentFavouriteHelp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyDepartmentHelpId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDepartmentHelpId");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("DepartmentFavouriteHelps");
                });

            modelBuilder.Entity("Energie.Domain.Domain.DepartmentFavouriteTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentTipId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("DepartmentTipId");

                    b.ToTable("DepartmentFavouriteTip");
                });

            modelBuilder.Entity("Energie.Domain.Domain.DepartmentTip", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("EnergyAnalysisQuestionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EnergyAnalysisQuestionsId");

                    b.ToTable("DepatrmentTip");
                });

            modelBuilder.Entity("Energie.Domain.Domain.EnergyAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EnergyAnalysis");
                });

            modelBuilder.Entity("Energie.Domain.Domain.EnergyAnalysisQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EnergyAnalysisID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EnergyAnalysisID");

                    b.ToTable("EnergyAnalysisQuestions");
                });

            modelBuilder.Entity("Energie.Domain.Domain.EnergyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FavouriteTipId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReminder")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PlanEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.Property<int>("TipTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("PlanStatusId");

                    b.HasIndex("ResponsiblePersonId");

                    b.HasIndex("TipTypeId");

                    b.ToTable("EnergyPlan");
                });

            modelBuilder.Entity("Energie.Domain.Domain.EnergyScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserID");

                    b.HasIndex("MonthId");

                    b.ToTable("EnergyScore");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Feedback", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FeedBackDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Energie.Domain.Domain.HelpCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HelpCategory");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Energie.Domain.Domain.LikeTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentFavouriteTipId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentTipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserID");

                    b.HasIndex("DepartmentFavouriteTipId");

                    b.HasIndex("DepartmentTipId");

                    b.ToTable("LikeTip");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Month", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Month");
                });

            modelBuilder.Entity("Energie.Domain.Domain.MonthlyNotification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("CompanyUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthId")
                        .HasColumnType("int");

                    b.Property<bool>("PopUp")
                        .HasColumnType("bit");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CompanyUserID");

                    b.HasIndex("MonthId");

                    b.ToTable("MonthlyNotifications");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserID");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Energie.Domain.Domain.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Notification_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("Energie.Domain.Domain.PlanStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanStatus");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Tip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EnergyAnalysisQuestionsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnergyAnalysisQuestionsId");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("Energie.Domain.Domain.TipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipType");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Translations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("Energie.Domain.Domain.UserDepartmentTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnergyAnalysisQuestionsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("EnergyAnalysisQuestionsId");

                    b.ToTable("UserDepartmentTip");
                });

            modelBuilder.Entity("Energie.Domain.Domain.UserEnergyAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnergyAnalysisQuestionsID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserID");

                    b.HasIndex("EnergyAnalysisQuestionsID");

                    b.ToTable("UserEnergyAnalyses");
                });

            modelBuilder.Entity("Energie.Domain.Domain.UserFavouriteHelp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyHelpID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CompanyUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyHelpID");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("UserFavouriteHelp");
                });

            modelBuilder.Entity("Energie.Domain.Domain.UserFavouriteTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TipId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("TipId");

                    b.ToTable("UserFavouriteTips");
                });

            modelBuilder.Entity("Energie.Domain.Domain.UserTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnergyAnalysisQuestionsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserID");

                    b.HasIndex("EnergyAnalysisQuestionsId");

                    b.ToTable("UserTip");
                });

            modelBuilder.Entity("Energie.Domain.Domain.CompanyAdmin", b =>
                {
                    b.HasOne("Energie.Domain.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Energie.Domain.Domain.CompanyDepartmentHelp", b =>
                {
                    b.HasOne("Energie.Domain.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.HelpCategory", "HelpCategory")
                        .WithMany()
                        .HasForeignKey("HelpCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("HelpCategory");
                });

            modelBuilder.Entity("Energie.Domain.Domain.CompanyHelp", b =>
                {
                    b.HasOne("Energie.Domain.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.HelpCategory", "HelpCategory")
                        .WithMany()
                        .HasForeignKey("HelpCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("HelpCategory");
                });

            modelBuilder.Entity("Energie.Domain.Domain.CompanyHelpCategory", b =>
                {
                    b.HasOne("Energie.Domain.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Energie.Domain.Domain.CompanyUser", b =>
                {
                    b.HasOne("Energie.Domain.Domain.Department", "Department")
                        .WithMany("CompanyUser")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Energie.Domain.Domain.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID");

                    b.Navigation("Department");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Department", b =>
                {
                    b.HasOne("Energie.Domain.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Energie.Domain.Domain.DepartmentEnergyPlan", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.PlanStatus", "PlanStatus")
                        .WithMany()
                        .HasForeignKey("PlanStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.CompanyUser", "ResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("ResponsiblePersonId");

                    b.HasOne("Energie.Domain.Domain.TipType", "TipType")
                        .WithMany()
                        .HasForeignKey("TipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("PlanStatus");

                    b.Navigation("ResponsiblePerson");

                    b.Navigation("TipType");
                });

            modelBuilder.Entity("Energie.Domain.Domain.DepartmentFavouriteHelp", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyDepartmentHelp", "CompanyDepartmentHelps")
                        .WithMany()
                        .HasForeignKey("CompanyDepartmentHelpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyDepartmentHelps");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Energie.Domain.Domain.DepartmentFavouriteTip", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.DepartmentTip", "DepartmentTip")
                        .WithMany()
                        .HasForeignKey("DepartmentTipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("DepartmentTip");
                });

            modelBuilder.Entity("Energie.Domain.Domain.DepartmentTip", b =>
                {
                    b.HasOne("Energie.Domain.Domain.EnergyAnalysisQuestions", "EnergyAnalysisQuestions")
                        .WithMany()
                        .HasForeignKey("EnergyAnalysisQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnergyAnalysisQuestions");
                });

            modelBuilder.Entity("Energie.Domain.Domain.EnergyAnalysisQuestions", b =>
                {
                    b.HasOne("Energie.Domain.Domain.EnergyAnalysis", "EnergyAnalysis")
                        .WithMany()
                        .HasForeignKey("EnergyAnalysisID");

                    b.Navigation("EnergyAnalysis");
                });

            modelBuilder.Entity("Energie.Domain.Domain.EnergyPlan", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.PlanStatus", "PlanStatus")
                        .WithMany()
                        .HasForeignKey("PlanStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.CompanyUser", "ResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("ResponsiblePersonId");

                    b.HasOne("Energie.Domain.Domain.TipType", "TipType")
                        .WithMany()
                        .HasForeignKey("TipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("PlanStatus");

                    b.Navigation("ResponsiblePerson");

                    b.Navigation("TipType");
                });

            modelBuilder.Entity("Energie.Domain.Domain.EnergyScore", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserID");

                    b.HasOne("Energie.Domain.Domain.Month", "Month")
                        .WithMany()
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Feedback", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Energie.Domain.Domain.LikeTip", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUsers")
                        .WithMany()
                        .HasForeignKey("CompanyUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.DepartmentFavouriteTip", null)
                        .WithMany("LikeTips")
                        .HasForeignKey("DepartmentFavouriteTipId");

                    b.HasOne("Energie.Domain.Domain.DepartmentTip", "DepartmentTip")
                        .WithMany("LikeTips")
                        .HasForeignKey("DepartmentTipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUsers");

                    b.Navigation("DepartmentTip");
                });

            modelBuilder.Entity("Energie.Domain.Domain.MonthlyNotification", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserID");

                    b.HasOne("Energie.Domain.Domain.Month", "Month")
                        .WithMany()
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Notification", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserID");

                    b.HasOne("Energie.Domain.Domain.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId");

                    b.Navigation("CompanyUser");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Tip", b =>
                {
                    b.HasOne("Energie.Domain.Domain.EnergyAnalysisQuestions", "EnergyAnalysisQuestions")
                        .WithMany()
                        .HasForeignKey("EnergyAnalysisQuestionsId");

                    b.Navigation("EnergyAnalysisQuestions");
                });

            modelBuilder.Entity("Energie.Domain.Domain.UserDepartmentTip", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.EnergyAnalysisQuestions", "EnergyAnalysisQuestions")
                        .WithMany()
                        .HasForeignKey("EnergyAnalysisQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("EnergyAnalysisQuestions");
                });

            modelBuilder.Entity("Energie.Domain.Domain.UserEnergyAnalysis", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserID");

                    b.HasOne("Energie.Domain.Domain.EnergyAnalysisQuestions", "EnergyAnalysisQuestions")
                        .WithMany()
                        .HasForeignKey("EnergyAnalysisQuestionsID");

                    b.Navigation("CompanyUser");

                    b.Navigation("EnergyAnalysisQuestions");
                });

            modelBuilder.Entity("Energie.Domain.Domain.UserFavouriteHelp", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyHelp", "CompanyHelp")
                        .WithMany()
                        .HasForeignKey("CompanyHelpID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyHelp");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Energie.Domain.Domain.UserFavouriteTip", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.Tip", "Tips")
                        .WithMany()
                        .HasForeignKey("TipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("Tips");
                });

            modelBuilder.Entity("Energie.Domain.Domain.UserTip", b =>
                {
                    b.HasOne("Energie.Domain.Domain.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Energie.Domain.Domain.EnergyAnalysisQuestions", "EnergyAnalysisQuestions")
                        .WithMany()
                        .HasForeignKey("EnergyAnalysisQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("EnergyAnalysisQuestions");
                });

            modelBuilder.Entity("Energie.Domain.Domain.Department", b =>
                {
                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Energie.Domain.Domain.DepartmentFavouriteTip", b =>
                {
                    b.Navigation("LikeTips");
                });

            modelBuilder.Entity("Energie.Domain.Domain.DepartmentTip", b =>
                {
                    b.Navigation("LikeTips");
                });
#pragma warning restore 612, 618
        }
    }
}
